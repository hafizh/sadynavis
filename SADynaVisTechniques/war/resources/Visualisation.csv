"id","name","description","crossReference","tools","representedData","advantages","disadvantages","screenshotUrl"
"1","Interaction diagram","A general name for sequence diagram like diagrams","Sequence diagram : 2 | Temporal msg flow diag : 3 | Scene diagram : 4 | Transaction flows view : 5 | SCED sequence diag : 6","Program explorer","Interaction, trace data.",,,"https://www.dropbox.com/s/rhinfdzp73v357d/interaction_diagram_program_explorer.png"
"2","Sequence diagram","no need","Interaction diagram : 1 | Temporal msg flow diag : 3 | Scene diagram : 4 | Transaction flows view : 5 | SCED sequence diag : 6","Kieker | SCED | Scene | TPTP | VET | OASIS | JIVE(2011) | Diver | FSV | Reticella | Collaboration browser | WSN","Interaction, trace data","Clearly depicts interaction","Not scalable","https://www.dropbox.com/sh/0c8llpxt5n5o3kr/j9bNeTR-M1"
"3","Temporal message-flow diagram","Sequence diagram origin. alternatively called sequence charts, interaction diagrams, event traces, or actor diagrams, are illustrations of a system’s global message-passing activity over time, and a pictorial aid to understanding the system’s behavior.","Interaction diagram : 1 | Sequence diagram : 2 | Scene diagram : 4 | Transaction flows view : 5 | SCED sequence diag : 6","IsVis | Program explorer","Interaction, trace data.","Clearly depicts interaction","Not scalable","https://www.dropbox.com/sh/gwbdfn209txa3kj/njsQvqFGJJ"
"4","Scene diagram","A bit different syntax from sequence diagram. Includes collapsing of calls, partitioning of long calls to view 1 part at once and allocation of instances.","Interaction diagram : 1 | Sequence diagram : 2 | Temporal msg flow diag : 3 | Transaction flows view : 5 | SCED sequence diag : 6","Scene","Interaction, trace data.","Clearly depicts interaction. Introduces some syntax to hide unnecessary traces and/or objects to deal with scalability.","Still not scalable enough for architecture level.","https://www.dropbox.com/sh/rh4cc76vyr53kbe/WrurxgnZwI"
"5","Transaction flows view","Same syntax as sequence diagram. Also includes static structure, as Packages on horizontal axis.","Interaction diagram : 1 | Sequence diagram : 2 | Temporal msg flow diag : 3 | Scene diagram : 4 | SCED sequence diag : 6","WSNavigator","Interaction, trace data.","Introduces horizontal abstraction by collapsing packages, thereby hiding respective traces","Not scalable enough for architecture level.","https://www.dropbox.com/sh/3l9gssyo42wqqhq/Pg-_gFKnSN"
"6","SCED sequence diagram","A sequence diagram with extra syntax for loop constructs, conditional statements.","Interaction diagram : 1 | Sequence diagram : 2 | Temporal msg flow diag : 3 | Scene diagram : 4 | Transaction flows view : 5","SCED | SHimBa","Interaction, trace data.","For loop syntax to avoid repetition. ","Not scalable enough for architectural level. Can be a bit confusing because of too many conditional statements, loop constructs. ","https://www.dropbox.com/sh/uqrhp3dv1vl327z/MwBiNAnV1H"
"7","Call tree","no need","Execution pattern view : 8 | Reference patten view : 9 | Program traces view : 10 | ConeTree : 26","Kieker | Ovation | Jinsight | Zinsight | Diver | SEAT | FireDetective | Program explorer","Interaction, trace data","depicts interaction very good, clear representation of instances of classes. Saves more space than sequence diagrams.","Not scalable without abstraction.","https://www.dropbox.com/sh/aq0lgqbg94xcsjl/Fii277QdpJ"
"8","Execution pattern view","Call tree like structure, horizontal. Time increases over the y-axis, down. The height of each node represents the duration it was executed.  Nodes can be collapsed. ","Call tree : 7 | Reference patten view : 9 | Program traces view : 10 | ConeTree : 26","Ovation","Interaction, trace data","Dealing with scalability very good.  Pattern recognition for abstraction.","Still, not scalable enough for architecture level.","https://www.dropbox.com/sh/yj0iq5fm4lcujug/Q9Q4gNy3D9"
"9","Reference pattern view","Very similar to #8. It also groups instances of objects. ","Call tree : 7 | Execution pattern view : 8 | Program traces view : 10 | ConeTree : 26","Jinsight | Zinsight","static and trace data","Groups instances to save space and groups methos calls from each instance into one edge. ","Not scalable enough for the whole trace data. Needs to be sliced. ","https://www.dropbox.com/s/g93hif1tmoq6qdd/reference_pattern_view.png"
"10","Program traces view","Call tree like structure, allows collapse and expand on nodes. Eclipse style. Very similar to #8. It also displays separate threads. However it only dispays list of traces, and not the whole call stack. It is used in synchronization with sequence diagram, in the given tool.","Call tree : 7 | Execution pattern view : 8 | Reference patten view : 9 | ConeTree : 26","Diver","Interaction, trace data","Collapsing saves space.","not scalable. Not enough information is displayed(call stack)","https://www.dropbox.com/sh/sbihwtc4gj9ym5c/LqVsEtnkWH"
"11","Dependency graph","Dependencies contain, method calls, imports, or associations between entities. Interactions among objects constitute runtime dependencies among these system entities, which can be described using weighted directed dependency graphs, each entity is assigned a node and each dependency relation an edge, the edge is directed from an entity using a particular service to the entity providing that service, the edges are augmented with the total number of call actions among the respective entities observed in the considered set of traces.","Map metophor view : 12 | Interaction graph : 13 | Polymetric view : 14 | Circular bundle view : 15 | 3D-HEB : 16 | Sequence context view : 17 | Histogram view : 18 |","Kieker | Cerno | Shimba | Rigi | Jinsight | AVID | Extravis | Shrimp | CodeCrawler | CodeMap | VITRAIL | Stan | Zinsight","mostly represent static structure data, but may also include method call or class allocation dependency data","A good way to represent static information together with dynamic. Possible to introduce several levels of abstraction. ","Does not include time information.","https://www.dropbox.com/sh/7cvx3nun2ig85by/nwDqKtjtZu"
"12","Map metaphor views","# of components in more abstract components represented by size of nodes, edge width, # of dependencies","Dependency graph : 11 | Interaction graph : 13 | Polymetric view : 14 | Circular bundle view : 15 | 3D-HEB : 16 | Sequence context view : 17 | Histogram view : 18","Cerno","static structure and trace data","Good for representing several levels of abstraction.","Is not suitable for representing more fine grained, concrete level data(no time information).","https://www.dropbox.com/s/vuyo6bdwjdlfs2q/dependency_graph_cerno.png"
"13","Interaction graph","simple directed graph. Labels on the edges represent # of dependencies between components","Dependency graph : 11 | Map metaphor : 12 | Polymetric view : 14 | Circular bundle view : 15 | 3D-HEB : 16 | Sequence context view : 17 | Histogram view : 18","Program explorer","static structure and trace data","Good for representing several levels of abstraction.","Is not suitable for representing more fine grained, concrete level data(no time information).",""
"14","Polymetric view","a tree structure representing dependencies between components. Nodes are components, edges, dependencies(e.g. calls). The height, width, color, etc of nodes are mapped to static metrics(lines of code, etc).","Dependency graph : 11 | Map metaphor : 12 | Interaction graph : 13 | Circular bundle view : 15 | 3D-HEB : 16 | Sequence context view : 17 | Histogram view : 18","CodeCrawler","static structure data","Provides clear representation of classes and their importance in the context, their level of dependences to each other.","Does not support aggregation of several components into more abstract ones, because size and other properties of nodes are mapped to concrete level metrics. ","https://www.dropbox.com/s/drks1g7jdfjh415/dependency_graph_polymetric.png"
"15","Circular bundle view","all components and their child components(structured by package) are gathered around a circle, where edges represent dependencies. Components can be collapsed and hide their child comp-s. ","Dependency graph : 11","Extravis","static structure and trace data","Circular form and collapsing helps to cope with scalability.","Does not support abstraction very well, because the structure is defined according to packages. ","https://www.dropbox.com/s/o2f1i3h858jacdi/dependency_extravis.png"
"16","3D-HEB","Same as circular bundle, but instead of circle, the components are structured in a CodeCity.","Dependency graph : 11","VITRAIL","static structure and trace data","Provides clear representation of classes and their importance in the context, their level of dependences to each other.","Does not support abstraction very well, because the structure is defined according to packages. ","https://www.dropbox.com/sh/pthecapc2dlesyz/6WPH4E3tco"
"17","Sequence context view","A tree like structure, showing the context, the method in the trace was called, meaning several steps of method calls before this call. Edges represent aggregation of method calls. They can be reveiled. ","Dependency graph : 11","Zinsight","static structure and trace data.","A good way to represent static information together with dynamic. Aggregation of dependencies(method calls) helps to cope with massive trace data. ","Does not include time information. Is only suitable for subset of trace data, not scalable otherwise.","https://www.dropbox.com/sh/2eekbm9g9y1vccl/jvjdUBRUKt"
"18","Histogram view","The Histogram view is a basic visualization of resource consumption (CPU and memory) in terms of classes, instances, and methods. It gives an overview of hot spots in a program’s execution. The Histogram view arranges information by class. ","Dependency graph : 11","Jinsight","static structure and trace data. ",,"Pretty messed up, hard to read visuals.","https://www.dropbox.com/s/hhvz9qktxoh8o17/dependency_graph_jinsight.png"
"19","Markov chains","No need","Depencency graph : 11","Kieker","interaction, trace data.",,,""
"20","State chart","No need","sced state diagram","SCED","interaction, trace data.",,,""
"21","Information mural diagram","When zoomed in, mural views are either message flow diagrams or call tree like structure. But, usually comprises all of trace data in one view compressed up to 1 pixel. Is mostly used for navigation over the data. ","Execution view : 21 | Massive sequence view : 22 | Execution bar : 23","Jinsight | Zinsight | Extravis | Gammatella | Isvis","interaction, trace data.","Very useful to display massive amounts of trace data. Helps user detect different patterns in data. ","Cannot be used separately, as does not include enough information.","https://www.dropbox.com/sh/eet2bjqtabv6yg9/k_JffwORnG"
"22","Execution view","Call tree based information mural, Vertical","Information mural : 20 | Massive sequence view : 22 | Execution bar : 23","Jinsight | Zinsight","interaction, trace data.","Very useful to display massive amounts of trace data. Helps user detect different patterns in data. ","Cannot be used separately, as does not include enough information.","https://www.dropbox.com/sh/rvag6yq9mmb56ae/X1qhRkDdSu"
"23","Massive sequence view","Sequence diagram based information mural, Vertical.","Information mural : 20 | Execution view : 21 | Execution bar : 23","Extravis","interaction, trace data.","Very useful to display massive amounts of trace data. Helps user detect different patterns in data. ","Cannot be used separately, as does not include enough information.","https://www.dropbox.com/sh/xnfvos8qiz2shm1/Ewhu55XD45"
"24","Execution Bar","Sequence diagram based information mural, Horizontal.","Information mural : 20 | Execution view : 21 | Massive sequence view : 22","Gammatella","interaction, trace data.","Very useful to display massive amounts of trace data. Good for navigation over the data. ","Cannot be used separately, as does not include enough information.","https://www.dropbox.com/s/ljz81491l9ygrid/execution%20bar.png"
"25","CodeViewer","Source code mural, colored and zoomed out.","Information mural : 20 | Execution bar : 23 | Execution view : 21 | Massive sequence view : 22","Gammatella","static data(code, colored). ",,,"https://www.dropbox.com/s/52f4skkqpyatl0v/code_viewer.png"
"26","Tree Map","2D square form represantation of hierarchical data","Cone tree : 26 | 2d tree","Gammatella","hierarchical data, representing static structure.","Space saving way to visualize hierarchical data.","Sometimes hard to understand.","https://www.dropbox.com/s/z9shgrhuadrou0f/tree_map_gammatella.png"
"27","Cone tree","3D tree representation of hierarchical data","Tree Map : 25","unknown","hierarchical data",,,""
"28","CCRC","Calling context ring chart, a method call stack in a circular form. In the center is the main method. Allows collapse/expand.",,"Trevis","interaction, trace data.","Circular call tree saves space, allowes to display more data. ","Is not scalable enough.","https://www.dropbox.com/sh/s6ceqeru1m6f4z8/FP8cA6oJtm"
"29","CodeMap","Circular, mountain like structures, nodes, represent components. Size corresponds to the # of child components it has. ","CodeCity : 29","CodeMap","static structure data.",,,"https://www.dropbox.com/sh/wzdhk3vcfdvqvsc/ApYg99X7gN"
"30","CodeCity","A city is constructed from source code metrics, such as # of methods, attributes, etc. in a class. Each class then represented as a building. ","3D-HEB : 16 | CodeMap : 28","CodeCity","static structure data.",,,"https://www.dropbox.com/s/mhkcg79mu7ws8sc/codecity.png"
"31","Class association diag","A simple matrix structure, which depics the classes associated with each other(method call). White cell represents no association. Intencity of color corresponds to the # of method calls.",,"VET","interaction, trace data.","Simple to implement, understand.","Not scalable.","https://www.dropbox.com/s/vl6amtlyg3c900q/class_association_diag.png"
"32","Box Display","Each cell depicts a rectangle, where it's height, width, color corresponds to # of method calls, # of allocations etc. Each cell represents a class. ",,"Jive visualizer(2003)","interaction, trace data.",,"Not easy to understand, not scalable, does not support levels of abstraction. ","https://www.dropbox.com/s/yhkr1hy1knmosth/box_display_jive_visualizer.png"
"33","Package fingerprint","A matrix structure to represent packages and relationships between them. ",,,"static structure data.",,,"https://www.dropbox.com/s/ogpo1qea45z7u1e/package_fingerprints.png"
"34","VDP","A visualization which contains histogram, barcode chart and dotplot. Each are mapped to different statistical values, such as # of calls etc. Each dot in dotplot represents a trace entry.  Histogram depicts duration for each trace entry. Barcode depicts properties of a trace entry such as type of resources it uses, etc. ",,"lviz","trace data statistically represented.","Good way of statistically present massive amounts of data. Allows user to find patterns in data. ","Cannot be used separately, as it present summary info, needs to be complemented with other visualization. ","https://www.dropbox.com/s/d3a9vqb4wtygtdo/vdp_lviz.png"
"35","Pattern Matrix","A matrix construct where call patterns are mapped to classes which were involved during execution of this pattern.",,"Isvis",,"Clearly maps detected patterns to components","Can only be used specifically for this purpose(see Adv-s). ","https://www.dropbox.com/s/xj25o8xhr2kbyl8/pattern_matrix.png"
"36","Pattern Mural","A mural representation of matrix, can contain millions of patterns.",,"Isvis",,,"Specifically zoomed out pattern matrix.",""
"37","Offscreen visualization","Visualization of classes in class diagram, when out of screen. It replaces the entity which is out of screen with a so called proxy, and puts on the border of the screen. ",,,"static or dynamic data, depending on the diagram.","Poverful complementary for scrolling technique in dealing with massive diagrams.",,"https://www.dropbox.com/sh/eh5dkw6wvu1agq2/mCovVNxXHu"
"38","Importance-Based Anti-Aliasing","An algorithm to avoid loosing important trace data when preparing for information mural. It applies weights(frequency of calls) when calculating the importance of each trace.",,"Extravis","trace data processing",,,""
"39","Call Compression","Used by Scene diagram to avoid too much trace data. Call is collapsed, thereby hiding the innner calls. ",,"Scene","trace data",,,""
"40","Partitioning of calls","Used by Scene diagram to avoid too much trace data. The call is partitioned into part1, part2, etc. to be expanded one at a time. ",,"Scene","trace data",,,""
"41","Projection and removal","Used by Scene diagram to avoid too much trace data. Filtering out traces that are not related to a selected object(class).",,"Scene","trace data",,,
"42","Single-step mode","Used by Scene diagram to avoid too much trace data. The diagram is animated step by step, so new entities are visualized as they arrive and removed as they are out of step range.  ",,"Scene","trace data",,,
"43","Collaboration instance","A collaboration instance is the se- quence of message sends between objects, ordered as a call tree, which results from a method invocation (all message sends up to the return)",,"Collaboration browser",,,,
"44","Collaboration pattern","A collaboration pattern is an equivalence class of several collaboration instances.",,"Collaboration browser",,,,
